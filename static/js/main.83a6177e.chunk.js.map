{"version":3,"sources":["Todo.jsx","Todos.jsx","AddTodo.jsx","App.js","serviceWorker.js","index.js"],"names":["Todo","props","type","onChange","onCheckbox","bind","todo","id","style","textDecoration","isCompleted","thing","className","onClick","onClickDelete","Todos","todos","map","key","AddTodo","useState","setTodo","onSubmit","e","preventDefault","addTodo","value","target","placeholder","App","uuidv1","require","setTodos","filter","newTodo","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yLAceA,EAZF,SAAAC,GACX,OACE,4BACE,2BAAOC,KAAK,WAAWC,SAAUF,EAAMG,WAAWC,U,EAAWJ,EAAMK,KAAKC,MACxE,0BAAMC,MAAO,CAAEC,eAAgBR,EAAMK,KAAKI,YAAc,eAAiB,SAAWT,EAAMK,KAAKK,OAC/F,4BAAQC,UAAU,aAAaC,QAASZ,EAAMa,cAAcT,U,EAAWJ,EAAMK,KAAKC,KAAlF,OCQSQ,EAZD,SAAAd,GACZ,OACE,yBAAKW,UAAU,WACb,4BACGX,EAAMe,MAAMC,KAAI,SAAAX,GAAI,OACnB,kBAAC,EAAD,CAAMY,IAAKZ,EAAKC,GAAID,KAAMA,EAAMF,WAAYH,EAAMG,WAAYU,cAAeb,EAAMa,sBCkB9EK,G,MAxBC,SAAAlB,GAAU,IAAD,EACCmB,mBAAS,IADV,mBAChBd,EADgB,KACVe,EADU,KAYvB,OACE,yBAAKT,UAAU,aACb,0BAAMU,SATW,SAAAC,GACnBA,EAAEC,iBAEFvB,EAAMwB,QAAQnB,GACde,EAAQ,KAKwBT,UAAU,YACtC,2BAAOV,KAAK,OAAOwB,MAAOpB,EAAMH,SAZhB,SAAAoB,GAAC,OAAIF,EAAQE,EAAEI,OAAOD,QAYmBd,UAAU,aAAagB,YAAY,eAC5F,4BAAQ1B,KAAK,SAASU,UAAU,WAAhC,WCoDOiB,MAjEf,WACE,IAAMC,EAASC,EAAQ,IADV,EAEaX,mBAAS,CACjC,CACEb,GAAIuB,IACJnB,MAAO,eACPD,aAAa,GAEf,CACEH,GAAIuB,IACJnB,MAAO,gCACPD,aAAa,GAEf,CACEH,GAAIuB,IACJnB,MAAO,cACPD,aAAa,GAEf,CACEH,GAAIuB,IACJnB,MAAO,uBACPD,aAAa,GAEf,CACEH,GAAIuB,IACJnB,MAAO,SACPD,aAAa,KA1BJ,mBAENM,EAFM,KAECgB,EAFD,KAoDb,OACE,6BACE,yBAAKpB,UAAU,WACb,yBAAKA,UAAU,UACb,yCAEF,kBAAC,EAAD,CAAOI,MAAOA,EAAOZ,WA5B3B,SAAoBG,GAClByB,EACEhB,EAAMC,KAAI,SAAAX,GAER,OADIA,EAAKC,KAAOA,IAAID,EAAKI,aAAeJ,EAAKI,aACtCJ,OAwBsCQ,cAnB7B,SAAAP,GACpByB,EAAShB,EAAMiB,QAAO,SAAA3B,GAAI,OAAIA,EAAKC,KAAOA,SAmBtC,kBAAC,EAAD,CAASkB,QAhBC,SAAAnB,GACd,IAAM4B,EAAU,CACd3B,GAAIuB,IACJnB,MAAOL,EACPI,aAAa,GAEfsB,EAAS,GAAD,mBAAKhB,GAAL,CAAYkB,WC1CJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.83a6177e.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Todo = props => {\r\n  return (\r\n    <li>\r\n      <input type=\"checkbox\" onChange={props.onCheckbox.bind(this, props.todo.id)} />\r\n      <span style={{ textDecoration: props.todo.isCompleted ? \"line-through\" : \"none\" }}>{props.todo.thing}</span>\r\n      <button className=\"btn-delete\" onClick={props.onClickDelete.bind(this, props.todo.id)}>\r\n        X\r\n      </button>\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default Todo;\r\n","import React from \"react\";\r\nimport Todo from \"./Todo\";\r\n\r\nconst Todos = props => {\r\n  return (\r\n    <div className=\"content\">\r\n      <ul>\r\n        {props.todos.map(todo => (\r\n          <Todo key={todo.id} todo={todo} onCheckbox={props.onCheckbox} onClickDelete={props.onClickDelete} />\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Todos;\r\n","import React, { useState } from \"react\";\r\n\r\nconst AddTodo = props => {\r\n  const [todo, setTodo] = useState(\"\");\r\n\r\n  const onInputChange = e => setTodo(e.target.value);\r\n\r\n  const onSubmitTodo = e => {\r\n    e.preventDefault();\r\n\r\n    props.addTodo(todo);\r\n    setTodo(\"\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"form-here\">\r\n      <form onSubmit={onSubmitTodo} className=\"form-add\">\r\n        <input type=\"text\" value={todo} onChange={onInputChange} className=\"input-todo\" placeholder=\"Add Todo..\" />\r\n        <button type=\"submit\" className=\"btn-add\">\r\n          Add\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AddTodo;\r\n","import React, { useState } from \"react\";\nimport Todos from \"./Todos\";\nimport \"./App.css\";\nimport AddTodo from \"./AddTodo\";\n\nfunction App() {\n  const uuidv1 = require(\"uuid/v1\");\n  const [todos, setTodos] = useState([\n    {\n      id: uuidv1(),\n      thing: \"Go to School\",\n      isCompleted: false\n    },\n    {\n      id: uuidv1(),\n      thing: \"Playing Football with Friends\",\n      isCompleted: false\n    },\n    {\n      id: uuidv1(),\n      thing: \"Do Homework\",\n      isCompleted: false\n    },\n    {\n      id: uuidv1(),\n      thing: \"Watching Movie Alone\",\n      isCompleted: false\n    },\n    {\n      id: uuidv1(),\n      thing: \"Coding\",\n      isCompleted: false\n    }\n  ]);\n\n  function onCheckbox(id) {\n    setTodos(\n      todos.map(todo => {\n        if (todo.id === id) todo.isCompleted = !todo.isCompleted;\n        return todo;\n      })\n    );\n  }\n\n  const onClickDelete = id => {\n    setTodos(todos.filter(todo => todo.id !== id));\n  };\n\n  const addTodo = todo => {\n    const newTodo = {\n      id: uuidv1(),\n      thing: todo,\n      isCompleted: false\n    };\n    setTodos([...todos, newTodo]);\n  };\n\n  return (\n    <div>\n      <div className=\"wrapper\">\n        <div className=\"header\">\n          <h1>ToDo App</h1>\n        </div>\n        <Todos todos={todos} onCheckbox={onCheckbox} onClickDelete={onClickDelete} />\n        <AddTodo addTodo={addTodo} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}